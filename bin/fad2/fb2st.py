

import xml.etree.ElementTree as ET

import os
import sys

AppPath = os.path.dirname(sys.argv[0])

def SetAppPath(ap):
	global AppPath
	AppPath = ap

def genFBType(root):
	f = open(root.attrib['Name']+'.st', 'w')
	fev = open(root.attrib['Name']+'.ev', 'w')
	
	
	if(root.attrib["Name"] in ['START', 'E_CYCLE','E_DELAY','SUB_2','PUB_2','IO_READER','IO_WRITER', 'E_SPLIT']):
		print "Using a standard file from lib for '%s'." % (root.attrib["Name"])
		
		libp = os.path.join(AppPath, 'library')
		sf = open(os.path.join(libp , root.attrib["Name"]+'.st'))
		f.write(sf.read())
		se = open(os.path.join(libp , root.attrib["Name"]+'.ev'))
		fev.write(se.read())
		
		
		sf.close()
		se.close()
		f.close()
		fev.close()
		return
		
		
	f.write("(* Generated by xml2st *)\n")
	fev.write("# Generated by xml2st \n")
	f.write('FUNCTION_BLOCK %s\n' % (root.attrib["Name"]))
	
	#ev
	evIn = root.find('InterfaceList').find('EventInputs')	
	f.write('  EVENT_INPUT\n')
	#fev.write("Events = []\n")
	for ev in evIn:
		f.write('    %s;\n' % (ev.get('Name')))
		#fev.write("Events.append(\""+ev.get('Name')+"\")\n")
		fev.write(" "+ev.get('Name')+" ")
	f.write('  END_EVENT\n')
	
	evIn = root.find('InterfaceList').find('EventOutputs')	
	f.write('  EVENT_OUTPUT\n')
	for ev in evIn:
		f.write('    %s;\n' % (ev.get('Name')))
		fev.write(" "+ev.get('Name')+" ")
	f.write('  END_EVENT\n\n')
	
	#ecc
	evIn = root.find('BasicFB').find('ECC')	
	f.write('  EC_STATES\n')
	for ev in evIn.findall('ECState'):
		f.write("    %s" % (ev.get('Name')))
		actions = ev.findall('ECAction')
		second=False
		for act in actions:
			if(second):
				f.write(', ')
			else:
				f.write(': ')
			second = True
			if('Algorithm' in act.attrib
			and 'Output' in act.attrib):				
				f.write("%s -> %s" % (act.get('Algorithm'),act.get('Output')))
			elif('Algorithm' in act.attrib):
				f.write("%s ->" % (act.get('Algorithm')))
			elif('Output' in act.attrib):
				f.write("-> %s" % (act.get('Output')))
		f.write(";\n")
		"""
		#print "ACT ==>", ev
		if(act != None):
			if('Name' in ev.attrib
				and 'Algorithm' in act.attrib
				and 'Output' in act.attrib):
				f.write('    %s: %s -> %s;\n' 
					% (ev.get('Name'), act.get('Algorithm'), 
					act.get('Output')))
			else:
				if('Name' in ev.attrib
					and 'Algorithm' in act.attrib
					):
					f.write('    %s: %s;\n' 
						% (ev.get('Name'), act.get('Algorithm')
						))	
				if('Name' in ev.attrib
					and 'Output' in act.attrib
					):
					f.write('    %s: -> %s;\n' 
						% (ev.get('Name'), 
						act.get('Output')))			
						
		else:
			f.write('    %s;\n' % (ev.get('Name')))
			
		"""	
			
	f.write('  END_STATES\n\n')
	f.write('  EC_TRANSITIONS\n')
	for ev in evIn.findall('ECTransition'):
		f.write("    %s TO %s := %s;\n" % 
			(ev.attrib["Source"],ev.attrib["Destination"],ev.attrib["Condition"]))
	f.write('  END_TRANSITIONS\n\n')
	
	
	
	#vars
	evIn = root.find('InterfaceList').find('InputVars')	
	f.write('  VAR_INPUT\n')
	for ev in evIn:
		f.write('    %s: %s;\n' % (ev.get('Name'), ev.get('Type')))
	f.write('  END_VAR\n\n')
	
	evIn = root.find('InterfaceList').find('OutputVars')	
	f.write('  VAR_OUTPUT\n')
	for ev in evIn:
		f.write('    %s: %s;\n' % (ev.get('Name'), ev.get('Type')))
	f.write('  END_VAR\n\n')
	
	
	#algorithms
	evIn = root.find('BasicFB').findall('Algorithm')	
	for alg in evIn:
		f.write('  ALGORITHM %s IN ST:\n' % (alg.attrib['Name']))
		a = alg.find('Lua')
		f.write('%s\n' % (a.attrib["Text"]))
		f.write('  END_ALGORITHM\n\n')
	
	f.write("END_FUNCTION_BLOCK\n")
	
	f.close()
	fev.close()
	#r = subprocess.call(["ieccomp.exe", "-o", Output, Output+"/"+root.attrib["Name"]+".st"])
	
	
def read(filename):
	tree = ET.parse(filename)
	root = tree.getroot()
	#log.write('Processing '+filename)
	if(root.tag == 'FBType'):
		genFBType(root)
		return 1
	else:
		print 'File is not a FB.'
	return 0
	#print root.tag