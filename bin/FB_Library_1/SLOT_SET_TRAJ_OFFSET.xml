<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE FBType >
<FBType Name="SLOT_SET_TRAJ_OFFSET" Comment="Sets trajectory offset distances from centerline" >
	<Identification Standard="61499-2" />
	<VersionInfo Organization="Universidade do Estado de Santa Catarina" Version="1.0" Author="GASR" Date="27-05-12" />
	<CompilerInfo>
	</CompilerInfo>
	<InterfaceList>
		<EventInputs>
			<Event Name="Init" >
				<With Var="pos" />
				<With Var="path_type" />
				<With Var="slot_width" />
				<With Var="tool_diameter" />
				<With Var="origin_x" />
				<With Var="origin_y" />
				<With Var="origin_z" />
				<With Var="end_x" />
				<With Var="end_y" />
				<With Var="end_z" />
				<With Var="distance" />
				<With Var="angle" />
				<With Var="center" />
				<With Var="radius" />
			</Event>
		</EventInputs>
		<EventOutputs>
			<Event Name="Cnf" >
				<With Var="offset_points" />
			</Event>
		</EventOutputs>
		<InputVars>
			<VarDeclaration Name="pos" Type="REAL" ArraySize="3" />
			<VarDeclaration Name="path_type" Type="STRING" />
			<VarDeclaration Name="slot_width" Type="REAL" />
			<VarDeclaration Name="tool_diameter" Type="REAL" />
			<VarDeclaration Name="origin_x" Type="REAL" ArraySize="3" />
			<VarDeclaration Name="origin_y" Type="REAL" ArraySize="3" />
			<VarDeclaration Name="origin_z" Type="REAL" ArraySize="3" />
			<VarDeclaration Name="end_x" Type="REAL" ArraySize="3" />
			<VarDeclaration Name="end_y" Type="REAL" ArraySize="3" />
			<VarDeclaration Name="end_z" Type="REAL" ArraySize="3" />
			<VarDeclaration Name="distance" Type="REAL" />
			<VarDeclaration Name="angle" Type="REAL" />
			<VarDeclaration Name="center" Type="REAL" ArraySize="3" />
			<VarDeclaration Name="radius" Type="REAL" ArraySize="3" />
		</InputVars>
		<OutputVars>
			<VarDeclaration Name="offset_points" Type="REAL" ArraySize="20" Comment="offset points list" />
		</OutputVars>
	</InterfaceList>
	<BasicFB>
		<ECC>
			<ECState Name="START" x="0" y="0" >
			</ECState>
			<ECState Name="EXE" x="0" y="0" >
				<ECAction Algorithm="exe_off" Output="Cnf" />
			</ECState>
			<ECTransition Source="START" Destination="EXE" Condition="Init" x="0" y="0" />
			<ECTransition Source="EXE" Destination="START" Condition="1" x="0" y="0" />
		</ECC>
		<Algorithm Name="exe_off" >
			<Lua  Text="
local offset = (slot_width/tool_diameter)
print( 'po', path_type, offset, slot_width, tool_diameter, 'center', center[1], center[2], center[3], 'pos', pos[1], pos[2], pos[3] )
print( 'VECTORS', 'o_y', origin_y[1], origin_y[2], origin_y[3] )
if not( offset > 1 ) then
    if( path_type == 'LINEAR_PATH' ) then
        offset_points[1] = { pos[1], pos[2], pos[3] }
        offset_points[2] = { pos[1] + origin_x[1]*distance, pos[2] + origin_x[2]*distance, pos[3] + origin_x[3]*distance }
    elseif( path_type == 'COMPLETE_CIRCULAR_PATH' ) then
        offset_points[1] = { pos[1], pos[2], pos[3] }
        offset_points[2] = { center[1], center[2], center[3], 360, radius, origin_z[1], origin_z[2], origin_z[3] }
    elseif( path_type == 'PARTIAL_CIRCULAR_PATH' ) then
        offset_points[1] = { pos[1], pos[2], pos[3] }
        offset_points[2] = { center[1], center[2], center[3], angle, radius, origin_z[1], origin_z[2], origin_z[3] }
        offset_points[3] = { center[1], center[2], center[3], -angle, radius, origin_z[1], origin_z[2], origin_z[3] }
    end
else
    local off_p = {}
    local off_int = math.floor( offset )
	local off_float = offset - off_int
	for i = 1, off_int do
        off_p[i] = 1
    end
    if( off_float > 0 ) then
        off_p[ #off_p + 1 ] = off_float
    end
    offset_points[1] = { (pos[1] - origin_y[1]*((slot_width/2 - (tool_diameter/2)))), (pos[2] - origin_y[2]*((slot_width/2 - (tool_diameter/2)))), (pos[3] - origin_y[3]*((slot_width/2 - (tool_diameter/2)))) }
    local status = 'going'
    for i = 1, (#off_p - 1) do
        if( path_type == 'LINEAR_PATH' ) then
            if( status == 'going' ) then
                offset_points[ 2*i ] = { offset_points[ 2*i - 1 ][1] + origin_x[1]*distance, offset_points[ 2*i - 1 ][2] + origin_x[2]*distance, offset_points[ 2*i - 1 ][3] + origin_x[3]*distance }
                status = 'coming'
            else
                offset_points[ 2*i ] = { offset_points[ 2*i - 1 ][1] - origin_x[1]*distance, offset_points[ 2*i - 1 ][2] - origin_x[2]*distance, offset_points[ 2*i - 1 ][3] - origin_x[3]*distance }
                status = 'going'
            end
        offset_points[ 2*i + 1 ] = { offset_points[ 2*i ][1] + origin_y[1]*(tool_diameter)*off_p[i], offset_points[ 2*i ][2] + origin_y[2]*(tool_diameter)*off_p[i], offset_points[ 2*i ][3] + origin_y[3]*(tool_diameter)*off_p[i] }
	elseif( path_type == 'COMPLETE_CIRCULAR_PATH' ) then
            local prov_radius = ( (offset_points[ 2*i - 1 ][1] - center[1])^2 + (offset_points[ 2*i - 1 ][2] - center[2])^2 + (offset_points[ 2*i - 1 ][3] - center[3])^2 )^0.5
            print( prov_radius, offset_points[ 2*i - 1 ][1], offset_points[ 2*i - 1 ][2], offset_points[ 2*i - 1 ][3], center[1], center[2], center[3] )
            if( status == 'going' ) then
                offset_points[ 2*i ] = { center[1], center[2], center[3], 360, prov_radius, origin_z[1], origin_z[2], origin_z[3] }
                print( #offset_points[ 2*i ] )
                status = 'coming'
            else
                offset_points[ 2*i ] = { center[1], center[2], center[3], -360, prov_radius, origin_z[1], origin_z[2], origin_z[3] }
                status = 'going'
            end
            print( 'VECTORS', 'o_y', off_p[i], offset_points[ 2*i ][1] + origin_y[1]*(tool_diameter)*off_p[i], origin_y[2], origin_y[3] )
            offset_points[ 2*i + 1 ] = { offset_points[ 2*i - 1][1] + origin_y[1]*(tool_diameter)*off_p[i + 1], offset_points[ 2*i - 1 ][2] + origin_y[2]*(tool_diameter)*off_p[i + 1], offset_points[ 2*i - 1 ][3] + origin_y[3]*(tool_diameter)*off_p[i + 1] }
        elseif( path_type == 'PARTIAL_CIRCULAR_PATH' ) then
            local prov_radius = ( (offset_points[ 3*i - 2 ][1] - center[1])^2 + (offset_points[ 3*i - 2 ][2] - center[2])^2 + (offset_points[ 3*i - 2 ][3] - center[3])^2 )^0.5
            print( 'prov_radius', prov_radius, offset_points[ 3*i - 2 ][1], offset_points[ 3*i - 2 ][2], offset_points[ 3*i - 2 ][3], center[1], center[2], center[3] )
            offset_points[ 3*i - 1 ] = { center[1], center[2], center[3], angle, prov_radius, origin_z[1], origin_z[2], origin_z[3] }
            offset_points[ 3*i ] = { center[1], center[2], center[3], -angle, prov_radius, origin_z[1], origin_z[2], origin_z[3] }
            offset_points[ 3*i + 1 ] = { (offset_points[ 3*i - 2 ][1] + origin_y[1]*(tool_diameter)*off_p[i + 1]),
                                 (offset_points[ 3*i - 2 ][2] + origin_y[2]*(tool_diameter)*off_p[i + 1]),
                                 (offset_points[ 3*i - 2 ][3] + origin_y[3]*(tool_diameter)*off_p[i + 1]) }
        end
    end
    if( path_type == 'LINEAR_PATH' ) then
        if( status == 'going' ) then
            offset_points[ 2*(#off_p) ] = { offset_points[ 2*(#off_p) - 1 ][1] + origin_x[1]*distance, offset_points[ 2*(#off_p) - 1 ][2] + origin_x[2]*distance, offset_points[ 2*(#off_p) - 1 ][3] + origin_x[3]*distance }
        else
            offset_points[ 2*(#off_p) ] = { offset_points[ 2*(#off_p) - 1 ][1] - origin_x[1]*distance, offset_points[ 2*(#off_p) - 1 ][2] - origin_x[2]*distance, offset_points[ 2*(#off_p) - 1 ][3] - origin_x[3]*distance }
        end
    elseif( path_type == 'COMPLETE_CIRCULAR_PATH' ) then
        local prov_radius = (( (offset_points[ 2*(#off_p) - 1 ][1] - center[1])^2 + (offset_points[ 2*(#off_p) - 1 ][2] - center[2])^2 + (offset_points[ 2*(#off_p) - 1 ][3] - center[3])^2 )^0.5)
        print( 'prov_radius', prov_radius  )
        if( status == 'going' ) then
            offset_points[ 2*(#off_p) ] = { center[1], center[2], center[3], 360, prov_radius, origin_z[1], origin_z[2], origin_z[3] }
        else
            offset_points[ 2*(#off_p) ] = { center[1], center[2], center[3], -360, prov_radius, origin_z[1], origin_z[2], origin_z[3] }
        end
    elseif( path_type == 'PARTIAL_CIRCULAR_PATH' ) then
        local prov_radius = (( (offset_points[ 3*(#off_p) - 2 ][1] - center[1])^2 + (offset_points[ 3*(#off_p) - 2 ][2] - center[2])^2 + (offset_points[ 3*(#off_p) - 2 ][3] - center[3])^2 )^0.5)
        offset_points[ 3*(#off_p) - 1 ] = { center[1], center[2], center[3], angle, prov_radius, origin_z[1], origin_z[2], origin_z[3] }
            offset_points[ 3*(#off_p) ] = { center[1], center[2], center[3], -angle, prov_radius, origin_z[1], origin_z[2], origin_z[3] }
    end
end
			"/>
		</Algorithm>
	</BasicFB>
</FBType>
