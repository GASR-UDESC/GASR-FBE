<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE FBType >
<FBType Name="GET_PLANE_LOWEST_POINT" Comment="Get plane lowest point" >
	<Identification Standard="61499-2" />
	<VersionInfo Organization="Universidade do Estado de Santa Catarina" Version="1.0" Author="GASR" Date="05-07-12" />
	<CompilerInfo>
	</CompilerInfo>
	<InterfaceList>
		<EventInputs>
			<Event Name="Init" >
				<With Var="origin" />
				<With Var="x_axis" />
				<With Var="y_axis" />
				<With Var="z_axis" />
				<With Var="x_length" />
				<With Var="y_length" />
			</Event>
		</EventInputs>
		<EventOutputs>
			<Event Name="Cnf" >
				<With Var="lowest_point" />
			</Event>
		</EventOutputs>
		<InputVars>
			<VarDeclaration Name="diameter" Type="REAL" Comment="Tool diameter" />
			<VarDeclaration Name="origin" Type="REAL" ArraySize="3" Comment="Plane origin point" />
			<VarDeclaration Name="x_axis" Type="REAL" ArraySize="3" Comment="reference axis" />
			<VarDeclaration Name="y_axis" Type="REAL" ArraySize="3" Comment="OP axis" />
			<VarDeclaration Name="z_axis" Type="REAL" ArraySize="3" Comment="normal vector" />
			<VarDeclaration Name="x_length" Type="REAL" />
			<VarDeclaration Name="y_length" Type="REAL" />
		</InputVars>
		<OutputVars>
			<VarDeclaration Name="lowest_point" Type="REAL" ArraySize="3" />
		</OutputVars>
	</InterfaceList>
	<BasicFB>
		<ECC>
			<ECState Name="START" x="0" y="0" >
			</ECState>
			<ECState Name="EXE" x="0" y="0" >
				<ECAction Algorithm="exe" Output="Cnf" />
			</ECState>
			<ECTransition Source="START" Destination="EXE" Condition="Init" x="0" y="0" />
			<ECTransition Source="EXE" Destination="START" Condition="1" x="0" y="0" />
		</ECC>
		<Algorithm Name="exe" >
			<Lua Text = "
x_length = x_length - diameter
y_length = y_length - diameter
if(( x_axis[1] == 0 ) and ( x_axis[2] == 0 ) and ( x_axis[3] == 0 )) then
    x_axis = { ((y_axis[2]*z_axis[3]) - (z_axis[2]*y_axis[3])),
                    ((y_axis[3]*z_axis[1]) - (z_axis[3]*y_axis[1])),
                    ((y_axis[1]*z_axis[2]) - (z_axis[1]*y_axis[2])) }
elseif(( y_axis[1] == 0 ) and ( y_axis[2] == 0 ) and ( y_axis[3] == 0 )) then
    y_axis = { ((z_axis[2]*x_axis[3]) - (x_axis[2]*z_axis[3])),
                    ((z_axis[3]*x_axis[1]) - (x_axis[3]*z_axis[1])),
                    ((z_axis[1]*x_axis[2]) - (x_axis[1]*z_axis[2])) }
elseif(( z_axis[1] == 0 ) and ( z_axis[2] == 0 ) and ( z_axis[3] == 0 )) then
    z_axis = { ((x_axis[2]*y_axis[3]) - (y_axis[2]*x_axis[3])),
                    ((x_axis[3]*y_axis[1]) - (y_axis[3]*x_axis[1])),
                    ((x_axis[1]*y_axis[2]) - (y_axis[1]*x_axis[2])) }
end
local points = { { origin[1], origin[2], origin[3] } }
local opp_point = { ( origin[1] + x_axis[1]*x_length + y_axis[1]*y_length ),
                    ( origin[2] + x_axis[2]*x_length + y_axis[2]*y_length ), origin[3] }
local t, w
if( y_axis[1] == 0 ) then
    t = ( opp_point[1]/x_axis[1] - origin[1] )
    w = ( opp_point[2] - origin[2] - x_axis[2]*t )/y_axis[2]
elseif( x_axis[1] == 0 ) then
    w = ( opp_point[1]/y_axis[1] - origin[2] )
    t = ( opp_point[2] - origin[2] - y_axis[2]*w )/y_axis[2]
else
    t = ( ( opp_point[2] - y_axis[2]*opp_point[1]/y_axis[1] + y_axis[2]*origin[1]/y_axis[1] - origin[2] )/( x_axis[2] - y_axis[2]*x_axis[2]/y_axis[1] ) )
    w = ( opp_point[1] - origin[1] - x_axis[1]*t )/y_axis[1]
end
opp_point[3] = ( x_axis[3]*t + y_axis[3]*w + origin[3] )
points[2] = { opp_point[1], opp_point[2], opp_point[3] }
points[3] = { opp_point[1], origin[2], x_axis[3]*t + origin[3] }
points[4] = { origin[1], opp_point[2], y_axis[3]*w + origin[3] }
if(( points[2][3] >= points[1][3] ) and ( points[3][3] >= points[1][3] ) and ( points[4][3] >= points[1][3] )) then
    lowest_point = { points[1][1], points[1][2], points[1][3] }
elseif(( points[1][3] >= points[2][3] ) and ( points[3][3] >= points[2][3] ) and ( points[4][3] >= points[2][3] )) then
    lowest_point = { points[2][1], points[2][2], points[2][3] }
elseif(( points[1][3] >= points[3][3] ) and ( points[2][3] >= points[3][3] ) and ( points[4][3] >= points[3][3] )) then
    lowest_point = { points[3][1], points[3][2], points[3][3] }
else
    lowest_point = { points[4][1], points[4][2], points[4][3] }
end
print( '\nlowest_points', lowest_point[3], points[1][3], points[2][3], points[3][3], points[4][3], '\n' )
			"/>
		</Algorithm>
	</BasicFB>
</FBType>
