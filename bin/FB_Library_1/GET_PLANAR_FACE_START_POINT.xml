<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE FBType >
<FBType Name="GET_PLANAR_FACE_START_POINT" Comment="Get planar face start point" >
	<Identification Standard="61499-2" />
	<VersionInfo Organization="Universidade do Estado de Santa Catarina" Version="1.0" Author="GASR" Date="21-06-12" />
	<CompilerInfo>
	</CompilerInfo>
	<InterfaceList>
		<EventInputs>
			<Event Name="Init" >
				<With Var="start_point" />
				<With Var="feature_placement" />
				<With Var="depth" />
				<With Var="allowance_bottom" />
				<With Var="tool_offset_length" />
				<With Var="overall_assembly_length" />
				<With Var="depth_z" />
				<With Var="depth_x" />
				<With Var="tool_diameter" />
				<With Var="feature_x" />
				<With Var="feature_z" />
				<With Var="feature_y" />
				<With Var="lowest" />
			</Event>
		</EventInputs>
		<EventOutputs>
			<Event Name="Cnf" >
				<With Var="fsp" />
			</Event>
		</EventOutputs>
		<InputVars>
			<VarDeclaration Name="start_point" Type="REAL" ArraySize="3" Comment="Operation start point" />
			<VarDeclaration Name="feature_placement" Type="REAL" ArraySize="3" Comment="Feature local coordinate system origin" />
			<VarDeclaration Name="depth" Type="REAL" ArraySize="3" Comment="Feature depth location" />
			<VarDeclaration Name="allowance_bottom" Type="REAL" ArraySize="3" Comment="Material thickness to be left uncut" />
			<VarDeclaration Name="tool_offset_length" Type="REAL" ArraySize="3" Comment="Tool blade length" />
			<VarDeclaration Name="overall_assembly_length" Type="REAL" ArraySize="3" Comment="Tool length" />
			<VarDeclaration Name="depth_z" Type="REAL" ArraySize="3" Comment="Depth z vector" />
			<VarDeclaration Name="depth_x" Type="REAL" ArraySize="3" Comment="Depth x vector" />
			<VarDeclaration Name="tool_diameter" Type="REAL" />
			<VarDeclaration Name="feature_x" Type="REAL" ArraySize="3" />
			<VarDeclaration Name="feature_z" Type="REAL" ArraySize="3" />
			<VarDeclaration Name="feature_y" Type="REAL" ArraySize="3" />
			<VarDeclaration Name="lowest" Type="REAL" ArraySize="3" />
		</InputVars>
		<OutputVars>
			<VarDeclaration Name="fsp" Type="REAL" ArraySize="3" Comment="feature_start_point" />
		</OutputVars>
	</InterfaceList>
	<BasicFB>
		<ECC>
			<ECState Name="EXE" x="0" y="0" >
				<ECAction Algorithm="alg" Output="Cnf" />
			</ECState>
			<ECState Name="START" x="0" y="0" >
			</ECState>
			<ECTransition Source="EXE" Destination="START" Condition="1" x="0" y="0" />
			<ECTransition Source="START" Destination="EXE" Condition="Init" x="0" y="0" />
		</ECC>
		<Algorithm Name="alg" >
			<Lua Text = "
local max_depth    = depth[3] + allowance_bottom
local blade_length = overall_assembly_length - tool_offset_length
print( 'feature vectors', 'x', feature_x[1], feature_x[2], feature_x[3], 'y', feature_y[1], feature_y[2], feature_y[3] )
print( 'tool_diameter', tool_diameter )
if(( start_point[1] ~= 0 ) and ( start_point[2] ~= 0 ) and ( start_point[3] ~= 0 )) then
    for i = 1, 3 do fsp[i] = start_point[i] end
else
    for i = 1, 3 do fsp[i] = feature_placement[i] end
    fsp[1] = fsp[1] + feature_x[1]*(tool_diameter/2) + feature_y[1]*(tool_diameter/2)
    fsp[2] = fsp[2] + feature_x[2]*(tool_diameter/2) + feature_y[2]*(tool_diameter/2)
    if(( depth_z[1] ~= 0 ) or ( depth_z[2] ~= 0 )) then
        depth_y = { ((depth_z[2]*depth_x[3]) - (depth_x[2]*depth_z[3])),
                    ((depth_z[3]*depth_x[1]) - (depth_x[3]*depth_z[1])),
                    ((depth_z[1]*depth_x[2]) - (depth_x[1]*depth_z[2])) }
        print( 'depth_vectors\n', depth_x[1], depth_x[2], depth_x[3], '\n', depth_y[1], depth_y[2], depth_y[3], '\n', depth_z[1], depth_z[2], depth_z[3], '\n' )
        local t, w
        if( depth_y[1] == 0 ) then
            t = ( fsp[1]/depth_x[1] - depth[1] )
            w = ( fsp[2] - depth[2] - depth_x[2]*t )/depth_y[2]
        elseif( depth_x[1] == 0 ) then
            w = ( fsp[1]/depth_y[1] - depth[2] )
            t = ( fsp[2] - depth[2] - depth_y[2]*w )/depth_y[2]
        else
            t = ( ( fsp[2] - depth_y[2]*fsp[1]/depth_y[1] + depth_y[2]*depth[1]/depth_y[1] - depth[2] )/( depth_x[2] - depth_y[2]*depth_x[2]/depth_y[1] ) )
            w = ( fsp[1] - depth[1] - depth_x[1]*t )/depth_y[1]
        end
        fsp[3] = ( depth_x[3]*t + depth_y[3]*w + depth[3] )
        if( (-blade_length + feature_placement[3]) > lowest[3] ) then
        elseif( blade_length - feature_placement[3] > -fsp[3] ) then
        else
            fsp[3] = -blade_length + feature_placement[3]
        end
    else
        if( blade_length > -max_depth ) then
            fsp[3] = (max_depth + feature_placement[3])
        else
            fsp[3] = (-blade_length + feature_placement[3])
        end
    end
end
print( 'start_point', fsp[1], fsp[2], fsp[3] )
--Check for depth violation
if( math.abs(fsp[3] - feature_placement[3]) > blade_length ) then
    fsp[3] = -blade_length
end
if( math.abs(fsp[3] - feature_placement[3]) > max_depth ) then
    fsp[3] = -max_depth
end
			"/>
		</Algorithm>
	</BasicFB>
</FBType>
